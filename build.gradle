buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.netflix.nebula:nebula-dependency-recommender:4.2.0'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:4.2.0'
        classpath 'org.starchartlabs.flare:flare-operations-plugins:2.0.0'
        classpath 'org.starchartlabs.flare:flare-publishing-plugins:1.0.0'
    }
}

apply plugin: 'org.starchartlabs.flare.merge-coverage-reports'

allprojects{
    apply plugin: 'eclipse'
    apply plugin: 'nebula.dependency-recommender'
    apply plugin: 'nebula.maven-resolved-dependencies'
    apply plugin: 'org.starchartlabs.flare.dependency-reporting'

    dependencyRecommendations {
        propertiesFile file: file("${rootDir}/dependencies.properties")
    }

    // Always download sources, to allow debugging, and use Eclipse containers for greater portability
    eclipse {
        classpath {
            downloadSources=true
        }
    }

    repositories {
        mavenCentral()
    }

}

subprojects{
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'nebula.maven-base-publish'
    apply plugin: 'nebula.maven-dependencies'
    apply plugin: 'org.starchartlabs.flare.increase-test-logging'
    apply plugin: 'org.starchartlabs.flare.source-jars'
    apply plugin: 'org.starchartlabs.flare.published-project'
    
    // Setup default test behavior, including failure logging
    test {
        useTestNG() {
            useDefaultListeners = true
        }
    }
    
    tasks.withType(JavaCompile) {
        options.deprecation = true
    }

    // Apply module naming to all projects
    // Add LICENSE so it is included in all JARs, as well as dependent licenses, fulfilling the "distributions include license" requirement
    jar {
        manifest {
            attributes("Automatic-Module-Name": "${project.group}.${project.name  - 'calamari-'}".replaceAll("-", "."))
        }
        
        from("${rootDir}"){
            include 'LICENSE'
        }
    }
    
    // All projects should provide source code and javadoc, and upload these with any released artifacts
    sourcesJar {
        from("${rootDir}"){
            include 'LICENSE'
        }
    }

    javadocJar{
        from("${rootDir}"){
            include 'LICENSE'
        }
    }

    // If not a remote run, publish to local only
    if(!project.hasProperty('remoteDeploy')){
        publishing {
            repositories {
                mavenLocal()
            }
        }
    }
    
    publishedInfo{
        url = 'https://github.com/StarChart-Labs/calamari'
      
        scm{
            github 'StarChart-Labs', 'calamari'
        }
      
        licenses{
            mit('repo')
        }
      
        developers{
            github 'romeara', 'Ryan OMeara'
        }
    }
    
    bintray {
        user = System.getProperty('bintray_user')
        key = System.getProperty('bintray_key')
        publications = [ 'nebula' ]

        if(!project.hasProperty('remoteDeploy')){
            dryRun = true
        }

        pkg {
            repo = 'calamari'
            name = "${project.name}"
            userOrg = 'starchart-labs'
            licenses = ['MIT']
            vcsUrl = 'https://github.com/StarChart-Labs/calamari'

            version {
                name = "${project.version}"
                desc = "${project.name} release ${project.version} final"
                released  = new Date()
                vcsTag = "${project.version}"

                gpg {
                    sign = true
                }
            }
        }
    }
    
}
